AWSTemplateFormatVersion: '2010-09-09'

Description: Crea un pipeline para Infraestructura

## ***************************** Parameters section ************************************
Parameters:

  CodepipelineBucket:
    Description: "Bucket for codepipeline"
    Type: String

  ClusterName:
    Description: "EKS ClusterName"
    Type: String

  Repository:
    Description: "Repository"
    Type: String

  OAuthToken:
    Description: "OAuth Token"
    Type: String
    NoEcho: true

  Owner:
    Description: "Github Owner"
    Type: String

## ***************************** Resources section ************************************
Resources:

#############################################################################
# CodeBuild: BuildProject: Test Files
# - Utiliza serverless framework para hacer despliegue de funciones serverless

  ValidateConfig:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:7.0.0
        Type: LINUX_CONTAINER
      Name: !Sub "${AWS::StackName}-codebuild-validate"
      ServiceRole: !Ref CodeBuildRole
      Source:
        BuildSpec: !Sub |
            version: 0.1
            phases:
              install:
                commands:
                  npm install jsonlint -g
              pre_build:
                commands:
                  - ls -l
              build:
                commands:
                  - echo "Validating config files"
                  - |
                      for conf in cloudformation/config/*.json; do
                          echo "Validating CFN parameters config file $conf"
                          jsonlint -q $conf
                      done
                  - echo "Validating Cloudformation template"
                  - |
                      for cfn_template in cloudformation/*.yml; do
                            echo "----------------------"
                            echo "Validating CloudFormation template file $cfn_template"
                            aws cloudformation validate-template --template-body file://$cfn_template
                      done
        Type: CODEPIPELINE


#############################################################################
################ Kong Codebuild Deploy Project ##############################
  KongBuildConfig:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: EKS_CLUSTER_NAME
            Value: !Ref ClusterName
          - Name: EKS_KUBECTL_ROLE_ARN
            Value: !GetAtt MasterEKSRole.Arn
      Name: !Sub "${AWS::StackName}-codebuild-kong-deploy"
      ServiceRole: !Ref CodeBuildRole
      Source:
        BuildSpec: !Sub |
            version: 0.2
            phases:
              install:
                commands:
                  - pwd
                  - ls -lh
                  - curl -sS -o /usr/local/bin/kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/kubectl
                  - curl -o /usr/local/bin/aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
                  - apt-get update && apt-get -y install jq golang python3-pip python3-dev && pip3 install --upgrade awscli
                  - export KUBECONFIG=$HOME/.kube/config
                  - chmod +x /usr/local/bin/kubectl /usr/local/bin/aws-iam-authenticator
              build:
                commands:
                  - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
                  - echo $EKS_KUBECTL_ROLE_ARN
                  - CREDS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
                  - export AWS_ACCESS_KEY_ID="$(echo $CREDS | jq -r '.Credentials.AccessKeyId')"
                  - export AWS_SECRET_ACCESS_KEY="$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')"
                  - export AWS_SESSION_TOKEN="$(echo $CREDS | jq -r '.Credentials.SessionToken')"
                  - export AWS_EXPIRATION=$(echo $CREDS | jq -r '.Credentials.Expiration')
                  - kubectl apply -f k8s/kong/deployment.yaml
        Type: CODEPIPELINE

#############################################################################
# CodeBuild: BuildProject: Test Files
# - Utiliza serverless framework para hacer despliegue de funciones serverless

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-cb-validate-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - logs:*
              - codebuild:*
              - cloudformation:ValidateTemplate
              - sts:AssumeRole
            Resource: "*"

          - Resource: '*'
            Effect: Allow
            Action:
              - eks:Describe*

          -
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${CodepipelineBucket}"
              - !Sub "arn:aws:s3:::${CodepipelineBucket}/*"
      Roles:
        -
          !Ref CodeBuildRole

############################################################################
# Pipeline: ApplicationPipeline
# - Pipeline Multi-Stage para hacer el release management de una aplicacion

  bc:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      RoleArn: !GetAtt PipeLineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            - RunOrder: 1
              Name: SourceFiles
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref Owner
                OAuthToken: !Ref OAuthToken
                Repo: !Ref Repository
                Branch: "master"
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: Repo

        # Stage de prueba de los templates
        - Name: Test
          Actions:
            - RunOrder: 1
              Name: "Test_files"
              InputArtifacts:
                - Name: Repo
              ActionTypeId:
                Category: Test
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub "${AWS::StackName}-codebuild-validate"
              OutputArtifacts: []

        - Name: Dev
          Actions:
            ## Deploy EKS Cluster
            - RunOrder: 1
              Name: EKS-Cluster
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: Repo
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                StackName: !Sub "${AWS::StackName}-cluster"
                TemplatePath: "Repo::cloudformation/eks-vc-cluster.yml"
                TemplateConfiguration: "Repo::cloudformation/config/eks.config.dev.json"
                ParameterOverrides: !Sub |
                  {
                     "ClusterName" : "${ClusterName}",
                     "Environment" : "dev"
                  }
                RoleArn: !GetAtt MasterEKSRole.Arn

            ## Deploy Worker Nodes 1
            - RunOrder: 2
              Name: WorkerNodes1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: Repo
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                StackName: !Sub "${AWS::StackName}-workers"
                TemplatePath: "Repo::cloudformation/eks-nodegroup1.yml"
                TemplateConfiguration: "Repo::cloudformation/config/eks.nodegroup1.config.dev.json"
                ParameterOverrides: !Sub |
                  {
                     "ClusterName" : "${ClusterName}",
                     "Environment" : "dev"
                  }
                RoleArn: !GetAtt MasterEKSRole.Arn
              OutputArtifacts: []

              ## Deploy Worker Nodes 2
            - RunOrder: 2
              Name: WorkerNodes2
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: Repo
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                StackName: !Sub "${AWS::StackName}-workers2"
                TemplatePath: "Repo::cloudformation/eks-nodegroup2.yml"
                TemplateConfiguration: "Repo::cloudformation/config/eks.nodegroup2.config.dev.json"
                ParameterOverrides: !Sub |
                  {
                     "ClusterName" : "${ClusterName}",
                     "Environment" : "dev"
                  }
                RoleArn: !GetAtt MasterEKSRole.Arn
              OutputArtifacts: []
#############################################

            - RunOrder: 3
              Name: "WorkerJoin"
              InputArtifacts:
                - Name: Repo
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub "${ClusterName}-codebuild-worker-join"
              OutputArtifacts: []

### Deploy Kong inside the eks Cluster
            - RunOrder: 4
              Name: "KongDeploy"
              InputArtifacts:
                - Name: Repo
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub "${AWS::StackName}-codebuild-kong-deploy"
              OutputArtifacts: []

      ArtifactStore:
        Type: S3
        Location: !Ref CodepipelineBucket

############################################################################
# Role: IAM Roles
# - Role required for CodePipeline

  PipeLineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-codepipeline-policy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
             - codebuild:StartBuild
             - codebuild:BatchGetBuilds
            Resource:
            - "*"
          -
            Effect: Allow
            Action:
              - codepipeline:*
              - iam:ListRoles
              - s3:ListAllMyBuckets
              - s3:GetBucketLocation
            Resource:
              - "*"
          -
            Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - !GetAtt MasterEKSRole.Arn
          -
            Effect: Allow
            Action:
              - cloudformation:Describe*
              - cloudFormation:List*
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource:
              - "*"
          -
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${CodepipelineBucket}"
              - !Sub "arn:aws:s3:::${CodepipelineBucket}/*"
      Roles:
        - !Ref PipeLineRole

  MasterEKSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - codebuild.amazonaws.com
                - codepipeline.amazonaws.com
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - sts:AssumeRole
      Path: /

  EKSMasterDeployerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cloudformationdeployer-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:CreatePolicy
              - iam:DeletePolicy
              - iam:GetRole
              - iam:DeleteRole
              - iam:PutRolePolicy
              - iam:PassRole
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:DeleteRolePolicy
              - iam:CreateInstanceProfile
              - iam:DeleteInstanceProfile
              - iam:RemoveRoleFromInstanceProfile
              - iam:AddRoleToInstanceProfile
              - codebuild:*
            Resource: "*"
          -
            Effect: Allow
            Action:
              - cloudformation:Describe*
              - cloudFormation:List*
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource:
              - "*"
          -
            Effect: Allow
            Action:
              - eks:*
              - ec2:*
              - autoscaling:*
            Resource:
              - "*"
          -
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${CodepipelineBucket}"
              - !Sub "arn:aws:s3:::${CodepipelineBucket}/*"
      Roles:
        - !Ref MasterEKSRole

Outputs:
    MasterEKSRole:
      Value: !GetAtt MasterEKSRole.Arn
      Export:
        Name: !Sub "${ClusterName}-master-role"
